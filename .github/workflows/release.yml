name: Release to Packagist

on:
  push:
    branches:
      - release

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version
        id: version
        run: |
          VERSION=$(cat VERSION | tr -d '\n\r ')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.version.outputs.tag }} already exists. Skipping release."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          if ! echo "${{ steps.version.outputs.version }}" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            echo "Expected format: X.Y.Z (e.g., 1.2.3)"
            exit 1
          fi

      - name: Create git tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Set up PHP
        if: steps.check_tag.outputs.exists == 'false'
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"

      - name: Install Composer dependencies
        if: steps.check_tag.outputs.exists == 'false'
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Create release package
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "📦 Creating release package..."
          PACKAGE_NAME="wp-gh-release-updater-${{ steps.version.outputs.version }}"

          # Create temporary directory for package
          mkdir -p "/tmp/$PACKAGE_NAME"

          # Copy files to package directory (excluding dev files)
          rsync -av --progress \
            --exclude='.git*' \
            --exclude='.github' \
            --exclude='tests' \
            --exclude='node_modules' \
            --exclude='*.zip' \
            --exclude='*.tar.gz' \
            --exclude='.phpcs*' \
            --exclude='phpcs.xml' \
            --exclude='phpstan.neon' \
            --exclude='rector.php' \
            --exclude='biome.json' \
            --exclude='.DS_Store' \
            --exclude='composer.json' \
            --exclude='composer.lock' \
            --exclude='package.json' \
            ./ "/tmp/$PACKAGE_NAME/"

          # Create ZIP file
          cd /tmp
          zip -r "$PACKAGE_NAME.zip" "$PACKAGE_NAME"
          mv "$PACKAGE_NAME.zip" "$GITHUB_WORKSPACE/"

          echo "✅ Package created: $PACKAGE_NAME.zip"
          ls -lh "$GITHUB_WORKSPACE/$PACKAGE_NAME.zip"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          generate_release_notes: true
          draft: false
          files: |
            wp-gh-release-updater-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for GitHub to process release
        if: steps.check_tag.outputs.exists == 'false'
        run: sleep 10

      - name: Trigger Packagist update
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "🚀 Triggering Packagist update..."
          RESPONSE=$(curl -w "\n%{http_code}" -XPOST -H'content-type:application/json' \
            'https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_API_TOKEN }}' \
            -d'{"repository":{"url":"https://github.com/rajandangi/wp-gh-release-updater"}}')

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          echo "Response: $BODY"
          echo "HTTP Code: $HTTP_CODE"

          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
            echo "✅ Packagist updated successfully!"
          else
            echo "⚠️  Packagist update may have failed (HTTP $HTTP_CODE)"
            echo "Response: $BODY"
          fi

      - name: Release summary
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          echo "## 🎉 Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/rajandangi/wp-gh-release-updater/releases/tag/${{ steps.version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download ZIP](https://github.com/rajandangi/wp-gh-release-updater/releases/download/${{ steps.version.outputs.tag }}/wp-gh-release-updater-${{ steps.version.outputs.version }}.zip)" >> $GITHUB_STEP_SUMMARY
          echo "- [Packagist Package](https://packagist.org/packages/rajandangi/wp-gh-release-updater)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Installation Options" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Via Composer:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "composer require rajandangi/wp-gh-release-updater" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Direct Download:**" >> $GITHUB_STEP_SUMMARY
          echo "Download the ZIP file from the release page (includes vendor dependencies)" >> $GITHUB_STEP_SUMMARY